{"version":3,"sources":["components/DisplayQuote.js","components/Button.js","RandomQuote.js","serviceWorker.js","index.js"],"names":["DisplayQuote","_ref","data","react_default","a","createElement","id","quote","author","Button","getQuote","onClick","href","concat","target","rel","RandomQuote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchQuotes","fetch","url","then","result","json","response","Math","floor","random","length","setState","state","components_DisplayQuote","components_Button","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","src_RandomQuote_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAYeA,SAVM,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KAEtB,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,GAAG,QAAQJ,EAAKK,OACpBJ,EAAAC,EAAAC,cAAA,QAAMC,GAAG,UAAT,IAAmBH,EAAAC,EAAAC,cAAA,SAAIH,EAAKM,QAA5B,QCgBYC,EApBA,SAAAR,GAAsB,IAApBS,EAAoBT,EAApBS,SAAUR,EAAUD,EAAVC,KAC1B,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAQM,QAASD,EAAUJ,GAAG,aAA9B,aAGAH,EAAAC,EAAAC,cAAA,KACCO,KAAI,yCAAAC,OAA4CX,EAAKK,MAAjD,QAAAM,OAA+DX,EAAKM,QACxEF,GAAG,cACHQ,OAAO,SACPC,IAAI,uBAJL,WCFGC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,YAAc,WACZC,MAAMR,EAAKD,MAAMU,KAChBC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAG,GACJ,IACM7B,EAAO6B,EADAC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,SAGjDjB,EAAKkB,SAAS,CACZlC,YAjBJgB,EAAKmB,MAAQ,CACXnC,KAAM,IAJSgB,mFASjBG,KAAKI,+CAiBL,IAAMvB,EAAOmB,KAAKgB,MAAMnC,KACxB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,CAAcpC,KAASA,IACvBC,EAAAC,EAAAC,cAACkC,EAAD,CAAQ7B,SAAUW,KAAKI,YAAavB,KAAOA,YA/BzBsC,aAqC1BxB,EAAYyB,aAAe,CACzBd,IAAK,oDAIQX,QCrCK0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAiBC,SAASC,eAAe,cD2HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.a7a1be10.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst DisplayQuote = ({data}) => {\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3 id=\"text\">{data.quote}</h3>\r\n\t\t\t<span id=\"author\"> <i>{data.author}</i> </span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default DisplayQuote","import React from 'react'\r\n\r\n\r\nconst Button = ({getQuote, data}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button onClick={getQuote} id=\"new-quote\">\r\n\t\t\t\tGet Quote\r\n\t\t\t</button>\r\n\t\t\t<a \r\n\t\t\t\thref={`https://twitter.com/intent/tweet?text=${ data.quote } -- ${ data.author }`} \r\n\t\t\t\tid=\"tweet-quote\" \r\n\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t>\r\n\t\t\t\t Tweet \r\n\t\t\t</a>\r\n\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default Button","import React, { Component } from \"react\"\r\nimport \"./RandomQuote.css\"\r\n\r\n\r\nimport DisplayQuote from \"./components/DisplayQuote\"\r\nimport Button from \"./components/Button\"\r\n\r\nclass RandomQuote extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      data: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.fetchQuotes()\r\n  }\r\n\r\n  fetchQuotes = () =>{\r\n    fetch(this.props.url)\r\n    .then(result => result.json())\r\n    .then(response => {\r\n      let random = Math.floor(Math.random() * response.length)\r\n      const data = response[random]\r\n      //setstate\r\n      this.setState({\r\n        data\r\n      })\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const data = this.state.data\r\n    return (\r\n      <div>\r\n        <DisplayQuote data = { data }/>\r\n        <Button getQuote={this.fetchQuotes} data={ data }/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nRandomQuote.defaultProps = {\r\n  url: \"http://quotes.stormconsultancy.co.uk/quotes.json\",\r\n}\r\n\r\n\r\nexport default RandomQuote","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport RandomQuote from './RandomQuote';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<RandomQuote />, document.getElementById('quote-box'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}